
# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - app_name
  - installation_folder


# required dependencies

- name: make sure chocolatey is installed on the machine
  win_command: "choco.exe --version"
  register: choco_test
  ignore_errors: yes

- name: install chocolatey
  block:
    
    - name: install Chocolatey if its not found
      win_chocolatey:
        name: chocolatey
        state: present
      register: choco_install_first
      ignore_errors: yes

    - name: pause for 60 seconds if first choco install failed
      pause:
        seconds: 60
      when: choco_install_first.rc != 0

    - name: wait more any choco.exe process to finished 
      win_wait_for_process:
        process_name_exact: choco
        state: absent
        timeout: 180
      when: choco_install_first.rc != 0
      failed_when: no
    
    - name: validate if chocolatey is installed on the machine
      win_command: "choco.exe --version"
      when: choco_install_first.rc != 0     

  when: choco_test.rc != 0

- name: disable enhanced exit codes
  win_chocolatey_feature:
    name: useEnhancedExitCodes
    state: disabled

- name: install nssm dependency
  win_chocolatey:
    name: nssm
    state: present

   
# set temp folder

- name: make sure temp folder
  win_file:
    path: "{{ temp_folder }}"
    state: directory

# download the file

- name: download zip from s3 url
  win_get_url:
    url: "{{ s3_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
  when: custom_download_url == ""

- name: download zip from custom url
  win_get_url:
    url: "{{ custom_download_url }}"
    dest: "{{ temp_folder }}\\{{ installer_file_name }}"
    timeout: "{{ download_timeout | default(60) }}"
    force: no
    force_basic_auth: yes
    url_username: "{{ custom_download_username }}"
    url_password: "{{ custom_download_password }}"
  when: custom_download_url != ""


# delete old installation (optional)

- name: clear old installation folder
  win_file: 
    path: "{{ installation_folder }}"
    state: absent
  when: clear_before_install == True


# copy current files to previous

- name: check if current installation exists
  win_stat:
    path: "{{ installation_folder }}/current/index.html"
  become: yes
  register: current_exists

- name: remove previous installation folder
  win_file:
    path: "{{ installation_folder }}/previous"
    state: absent
  when: current_exists.stat.exists
  become: yes

- name: copy current file to previous directory
  win_copy: 
    src: "{{ installation_folder }}/current" 
    dest: "{{ installation_folder }}/previous"
    remote_src: yes
  when: current_exists.stat.exists
  become: yes

# unpack and copy all the files to the installation folder

- name: make sure installation folder exists
  win_file:
    path: "{{ installation_folder }}/current"
    state: directory
  become: yes

- name: make sure unzip folder exist
  win_file:
    path: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    state: directory
  become: yes

- name: unzip the file
  win_unzip:
    src: "{{ temp_folder }}/{{ installer_file_name }}"
    dest: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}"
    remote_src: yes
    creates: "{{ temp_folder }}/{{ (installer_file_name | splitext)[0] }}/index.html"
  become: yes

- name: copy zip content to installation folder
  win_copy:
    src: "{{ temp_folder }}\\{{ (installer_file_name | splitext)[0] }}\\"
    dest: "{{ installation_folder }}\\current"
    remote_src: yes
  become: yes
  notify:
    - start the service


# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      installation_folder: "{{ installation_folder }}"

